@page "/cursos"
@using InnovateHubITM.Shared.Entities;
@using InnovateHubITM.WEB.Repositories;

@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService swal


<h3>Cursos</h3>

<div class="mb-3">
    <a class="btn btn-primary" href="/cursos/create">Nuevo Curso</a>
</div>

<GenericList MyList="Cursos">

    <Body>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Curso</th>
                    <th>Descripción</th>
                    <th>Duración</th>
                    <th>Precio</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var curso in Cursos!)
                {
                    <tr>
                        <td>@curso.Nombre</td>
                        <td>@curso.Descripcion</td>
                        <td>@curso.Duracion</td>
                        <td>@curso.Precio</td>
                        <td>
                            <a href="/cursos/edit/@curso.Id" class="btn btn-warning">Editar</a>
                            <button class="btn btn-danger" @onclick=@(() => Delete(curso))>Borrar</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </Body>
</GenericList>

@code {
    public List<Curso>? Cursos { get; set; }

    protected async override Task OnInitializedAsync()
    {
        var responseHttp = await repository.Get<List<Curso>>("/api/Cursos");
        Cursos = responseHttp.Response!;
        await Load();
    }

    private async Task Load()
    {
        var responseHttp = await repository.Get<List<Curso>>("/api/Cursos");
        Cursos = responseHttp.Response!;
    }

    private async Task Delete(Curso curso)
    {
        var result = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Estás seguro de que quieres borrar el curso?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var responseHttp = await repository.Delete($"/api/Cursos/{curso.Id}");

        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == System.Net.HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/");
            }
            else
            {
                var errorMessage = await responseHttp.GetErrorMessageAsync();
                await swal.FireAsync("Error", errorMessage, SweetAlertIcon.Error);
            }
        }
        else
        {
            await Load();
        }
    }
}