@page "/inscripciones"
@using InnovateHubITM.Shared.Entities
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService swal

<h3>Inscripciones</h3>

<div class="mb-3">
    <a class="btn btn-primary" href="/inscripciones/create">Nueva Inscripción</a>
</div>

<GenericList MyList="Inscripciones">

    <Body>
        <table class="table table-striped">
            <thead>
                <tr>
                    <th>Fecha</th>
                    <th>Curso</th>
                    <th>Estudiante</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                @foreach (var inscripcion in Inscripciones!)
                {
                    <tr>
                        <td>@inscripcion.Fecha</td>
                        <td>@inscripcion.Curso.Nombre</td>
                        <td>@inscripcion.Estudiante.Nombre</td>
                        <td>
                            <a href="/inscripciones/edit/@inscripcion.Id" class="btn btn-warning">Editar</a>
                            <button class="btn btn-danger" @onclick=@(() => Delete(inscripcion))>Borrar</button>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    </Body>
</GenericList>

@code {
    public List<Inscripcion>? Inscripciones { get; set; }

    protected async override Task OnInitializedAsync()
    {
        var responseHttp = await repository.Get<List<Inscripcion>>("/api/Inscripciones");
        Inscripciones = responseHttp.Response!;
    }

    private async Task Delete(Inscripcion inscripcion)
    {
        var result = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Estás seguro de que quieres borrar la inscripción?",
                Icon = SweetAlertIcon.Question,
                ShowCancelButton = true
            });

        var confirm = string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        var responseHttp = await repository.Delete($"/api/Inscripciones/{inscripcion.Id}");

        if (responseHttp.Error)
        {
            var errorMessage = await responseHttp.GetErrorMessageAsync();
            await swal.FireAsync("Error", errorMessage, SweetAlertIcon.Error);
        }
        else
        {
            await Load();
        }
    }

    private async Task Load()
    {
        var responseHttp = await repository.Get<List<Inscripcion>>("/api/Inscripciones");
        Inscripciones = responseHttp.Response!;
    }
}