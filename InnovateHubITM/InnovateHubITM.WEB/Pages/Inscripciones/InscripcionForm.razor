@page "/inscripciones/form"
@using InnovateHubITM.Shared.Entities
@inject SweetAlertService swal
@inject NavigationManager navigationManager
@inject IRepository repository

<NavigationLock OnBeforeInternalNavigation="(context) => OnBeforeInternalNavigation(context)"></NavigationLock>

<EditForm EditContext="editContext" OnSubmit="HandleSubmit">
    <DataAnnotationsValidator />
    <div class="mb-3">
        <label>ID Inscripcion:</label>
        <div>
            <InputNumber class="form-control" @bind-Value="@Inscripcion.Id" />
            <ValidationMessage For="@(() => Inscripcion.Id)" />
        </div>
        <label>Fecha de Inscripcion:</label>
        <div>
            <InputText class="form-control" @bind-Value="@Inscripcion.Fecha" />
            <ValidationMessage For="@(() => Inscripcion.Fecha)" />
        </div>
        <label>Curso:</label>
        <div>
            <InputSelect class="form-control" @bind-Value="@Inscripcion.CursoId">
                @foreach (var curso in Cursos)
                {
                    <option value="@curso.Id">@curso.Nombre</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => Inscripcion.CursoId)" />
        </div>
        <label>Estudiante:</label>
        <div>
            <InputSelect class="form-control" @bind-Value="@Inscripcion.EstudianteID">
                @foreach (var estudiante in Estudiantes)
                {
                    <option value="@estudiante.Id">@estudiante.Nombre</option>
                }
            </InputSelect>
            <ValidationMessage For="@(() => Inscripcion.EstudianteID)" />
        </div>
    </div>

    <button class="btn btn-primary" type="submit">Guardar Cambios</button>
    <button class="btn btn-success" @onclick="ReturnAction">Regresar</button>
</EditForm>

@code {
    private EditContext editContext = null!;
    private List<Curso> Cursos = new List<Curso>();  // Asegúrate de inicializar esta lista
    private List<Estudiante> Estudiantes = new List<Estudiante>();  // Asegúrate de inicializar esta lista

    protected override void OnInitialized()
    {
        editContext = new(Inscripcion);
    }

    [EditorRequired]
    [Parameter]
    public Inscripcion Inscripcion { get; set; } = null!;

    [EditorRequired]
    [Parameter]
    public EventCallback OnSubmit { get; set; }

    [EditorRequired]
    [Parameter]
    public EventCallback ReturnAction { get; set; }

    public bool FormPostedSuccessfully { get; set; } = false;

    private async Task HandleSubmit()
    {
        var responseHttp = await repository.Post("api/Inscripciones", Inscripcion);

        if (responseHttp.Error)
        {
            var errorMessage = await responseHttp.GetErrorMessageAsync();
            await swal.FireAsync("Error", errorMessage, SweetAlertIcon.Error);
        }
        else
        {
            FormPostedSuccessfully = true;
            await swal.FireAsync("Éxito", "La información se ha guardado correctamente", SweetAlertIcon.Success);
            navigationManager.NavigateTo("/inscripciones");
        }
    }

    private async Task OnBeforeInternalNavigation(LocationChangingContext context)
    {
        var formWasEdited = editContext.IsModified();

        if (!formWasEdited)
        {
            return;
        }

        if (FormPostedSuccessfully)
        {
            return;
        }

        var result = await swal.FireAsync(new SweetAlertOptions
            {
                Title = "Confirmación",
                Text = "¿Deseas abandonar la página y perder los cambios?",
                Icon = SweetAlertIcon.Warning,
                ShowCancelButton = true
            });

        var confirm = !string.IsNullOrEmpty(result.Value);

        if (confirm)
        {
            return;
        }

        context.PreventNavigation();
    }
}